AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon Aurora PostgreSQL.' 
Metadata: 
###############################################################################
# Parameter groups
###############################################################################
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -       
        Label:
          default: Network and Security
        Parameters:
          - VpcId          
          - PubliclyAccessible
          - AccessCidr
          - CidrBlocks
          - CidrSize
          - AvailabilityZones
          - NumberOfAvailabilityZones    
      -
        Label:
          default: Database Instance Specifications
        Parameters:
          - DBInstanceClass
      -
        Label:
          default: Database Replication
        Parameters:     
          - NumberofAuroraReplicas     
      -
        Label:
          default: Database Specification
        Parameters:                  
          - DBEngineVersion                                          
          - DBName
          - DBPort
          - DBUsername
          - DBPassword 
      -
        Label:
          default: Database Parameters
        Parameters:               
          - AutoMinorVersionUpgrade    
          - MonitoringInterval
          - BackupRetentionPeriod
          - StorageEncrypted
          - DeletionProtection
          - RDSTimeZone
      -
        Label:
          default: Maintainance Parameters
        Parameters:               
          - PreferredMaintenanceWindowDay    
          - PreferredMaintenanceWindowStartTime
          - PreferredMaintenanceWindowEndTime
             
    ParameterLabels:
      DBUsername:
        default: Master Username
      DBPassword:
        default: Master User Password
      CidrBlocks:
        default: CIDR Blocks
      CidrSize:
        default: CIDR Size
      AvailabilityZones:
        default: Availability Zones
      NumberOfAvailabilityZones:
        default: Number Of Availability Zones
      DBPort:
        default: Port Number
      DBInstanceClass:
        default: DB Instance Class      
      DBEngineVersion:
        default: Engine Version
      VpcId:
        default: VPC Id
      PubliclyAccessible:
        default: Publicly Accessible
      AccessCidr:
        default: Access CIDR            
      NumberofAuroraReplicas:
        default: Number of Aurora Replicas
      DeletionProtection:
        default: Deletion Protection
      RDSTimeZone:
        default: DB Server Timezone
      PreferredMaintenanceWindowDay:
        default: Preferred Maintenance Window Day
      PreferredMaintenanceWindowStartTime:
        default: Preferred Maintenance Window Start Time
      PreferredMaintenanceWindowEndTime:
        default: Preferred Maintenance Window End Time
      AutoMinorVersionUpgrade:
        default: Auto Minor Version Upgrade
      MonitoringInterval:
        default: Monitoring Interval
      BackupRetentionPeriod:
        default: Backup Retention Period
      StorageEncrypted:
        default: Storage Encrypted

###############################################################################
# Parameters 
###############################################################################   
Parameters:
  
  AccessCidr:
    Description: CIDR block to allow to connect to database
    Type: String
    Default: '172.31.0.0/16'

  AvailabilityZones:
    Description: list of availability zones to use, must be the same quantity as specified. Leave as Auto for stack to determine AZ names available.      
    Type: CommaDelimitedList
    Default: Auto

  BackupRetentionPeriod:
    Description: The number of days during which automatic DB snapshots are retained. Min is 1 and Max value is 35.
    Type: Number
    Default: '35'
    MinValue: '1'
    MaxValue: '35'
    
  CidrBlocks:
    Description: comma seperated list of CIDR blocks to place RDS into, must be the
      same quantity as specified in NumberOfAvailabilityZones
    Type: CommaDelimitedList
    Default: Auto

  CidrSize:
    Description: Size of Cidr block to allocate if CidrBlocks is set to Auto.
    Type: String
    Default: 27

  DBName:
    Description: The name of the database to create when the DB instance is created, will be autogenerated if set to "Auto".
    Type: String
    MinLength: '1'
    MaxLength: '64'
    Default: Auto
    AllowedPattern: ^(?!^mysql$)(?!^performance_schema$)(?!^information_schema$)[a-zA-Z0-9]*$
    ConstraintDescription: must contain from 1 to 64 alphanumeric characters, and not be reserved.

  DBPort:
    Description: TCP/IP Port for the Database Instance
    Type: Number
    Default: 5432
    ConstraintDescription: 'Must be in the range [1150-65535]'
    MinValue: 1150
    MaxValue: 65535
    
  DBUsername:
    Description: Database master username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: "^[a-zA-Z]+[0-9a-zA-Z_]*$"
    ConstraintDescription: Must start with a letter. Only numbers, letters, and _ accepted. max length 16 characters. Note 'admin' is AWS reserved.
    Default: 'master'

  DBPassword:
    Description: Master user database Password, if left at default a 32 character password will be generated
    Type: String
    Default: Auto
    NoEcho: 'True'

  DBEngineVersion:
    Description: Select Aurora PostgreSQL Database Engine Version
    Type: String
    Default: 9.6.8
    AllowedValues:
    - 9.6.8
    - 9.6.9
    - 10.4
    - 10.5
    - 10.6
     
  DBInstanceClass:
    Default: db.r4.large
    Description: Database Instance Class (only PostgreSQL 10.6 or later support the db.r5 instance classes)
    Type: String
    AllowedValues:  
    - db.r4.16xlarge
    - db.r4.8xlarge
    - db.r4.4xlarge
    - db.r4.2xlarge
    - db.r4.xlarge
    - db.r4.large
    - db.r5.24xlarge
    - db.r5.12xlarge
    - db.r5.4xlarge
    - db.r5.2xlarge
    - db.r5.xlarge
    - db.r5.large

  DeletionProtection:
    Description: Indicates if the DB cluster should have deletion protection enabled. 
    Type: String
    Default: 'false'
    AllowedValues:
    - 'true'
    - 'false'

  NumberOfAvailabilityZones:
    Description: Quantity of subnets to use, if selecting more than 2 the region this
      stack is in must have at least that many Availability Zones
    Type: String
    Default: '2'
    AllowedValues:        
    - '2' 
    - '3'
    - '4'
    - '5'

  NumberofAuroraReplicas:
    Description: Number of Aurora Replicas to deploy in addition to the Primary. If selecting 2 replicas, 3 are required in Number Of Availability Zones.
    Type: String
    Default: '0'
    AllowedValues:    
    - '0'
    - '1'
    - '2'     

  PubliclyAccessible:
    Description: Indicates whether the DB instance is an Internet-facing instance.
    Type: String
    Default: 'false'
    AllowedValues:
    - 'true'
    - 'false'
    
  VpcId:
    Description: The ID of the VPC to launch the RDS instance into
    Type: AWS::EC2::VPC::Id

  MonitoringInterval:
    Description: The interval, in seconds, between points when Enhanced Monitoring
      metrics are collected for the DB instance.
    Type: String
    Default: '1'
    AllowedValues:
    - '0'
    - '1'
    - '5'
    - '10'
    - '15'
    - '30'
    - '60'

  AutoMinorVersionUpgrade:
    Description: Indicates that minor engine upgrades are applied automatically to
      the DB instance during the maintenance window.
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'

  StorageEncrypted:
    Description: Indicates whether the DB instance is encrypted.
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'

  PreferredMaintenanceWindowDay:
    Description: The day of the week which RDS maintenance will be performed
    Type: String
    Default: Sun
    AllowedValues:
    - Mon
    - Tue
    - Wed
    - Thu
    - Fri
    - Sat
    - Sun

  PreferredMaintenanceWindowEndTime:
    Description: The weekly end time in UTC for the RDS maintenance window, must be
      more than PreferredMaintenanceWindowEndTime.
    Type: String
    Default: 06:00
    AllowedValues:
    - 00:00
    - 01:00
    - 02:00
    - 03:00
    - 04:00
    - 05:00
    - 06:00
    - 07:00
    - 08:00
    - 09:00
    - '10:00'
    - '11:00'
    - '12:00'
    - '13:00'
    - '14:00'
    - '15:00'
    - '16:00'
    - '17:00'
    - '18:00'
    - '19:00'
    - '20:00'
    - '21:00'
    - '22:00'

  PreferredMaintenanceWindowStartTime:
    Description: The weekly start time in UTC for the RDS maintenance window, must
      be less than PreferredMaintenanceWindowEndTime.
    Type: String
    Default: 04:00
    AllowedValues:
    - 00:00
    - 01:00
    - 02:00
    - 03:00
    - 04:00
    - 05:00
    - 06:00
    - 07:00
    - 08:00
    - 09:00
    - '10:00'
    - '11:00'
    - '12:00'
    - '13:00'
    - '14:00'
    - '15:00'
    - '16:00'
    - '17:00'
    - '18:00'
    - '19:00'
    - '20:00'
    - '21:00'
    - '22:00'

  RDSTimeZone:
    Description: The default timezone for the database engine to use.
    Type: String
    Default: UTC
    AllowedValues:
    - Africa/Cairo
    - Africa/Casablanca
    - Africa/Harare
    - Africa/Monrovia
    - Africa/Nairobi
    - Africa/Tripoli
    - Africa/Windhoek
    - America/Araguaina
    - America/Asuncion
    - America/Bogota
    - America/Caracas
    - America/Chihuahua
    - America/Cuiaba
    - America/Denver
    - America/Fortaleza
    - America/Guatemala
    - America/Halifax
    - America/Manaus
    - America/Matamoros
    - America/Monterrey
    - America/Montevideo
    - America/Phoenix
    - America/Santiago
    - America/Tijuana
    - Asia/Amman
    - Asia/Ashgabat
    - Asia/Baghdad
    - Asia/Baku
    - Asia/Bangkok
    - Asia/Beirut
    - Asia/Calcutta
    - Asia/Damascus
    - Asia/Dhaka
    - Asia/Irkutsk
    - Asia/Jerusalem
    - Asia/Kabul
    - Asia/Karachi
    - Asia/Kathmandu
    - Asia/Krasnoyarsk
    - Asia/Magadan
    - Asia/Muscat
    - Asia/Novosibirsk
    - Asia/Riyadh
    - Asia/Seoul
    - Asia/Shanghai
    - Asia/Singapore
    - Asia/Taipei
    - Asia/Tehran
    - Asia/Tokyo
    - Asia/Ulaanbaatar
    - Asia/Vladivostok
    - Asia/Yakutsk
    - Asia/Yerevan
    - Atlantic/Azores
    - Australia/Adelaide
    - Australia/Brisbane
    - Australia/Darwin
    - Australia/Hobart
    - Australia/Perth
    - Australia/Sydney
    - Canada/Newfoundland
    - Canada/Saskatchewan
    - Brazil/East
    - Europe/Amsterdam
    - Europe/Athens
    - Europe/Dublin
    - Europe/Helsinki
    - Europe/Istanbul
    - Europe/Kaliningrad
    - Europe/Moscow
    - Europe/Paris
    - Europe/Prague
    - Europe/Sarajevo
    - Pacific/Auckland
    - Pacific/Fiji
    - Pacific/Guam
    - Pacific/Honolulu
    - Pacific/Samoa
    - US/Alaska
    - US/Central
    - US/Eastern
    - US/East-Indiana
    - US/Pacific
    - UTC      
          
###############################################################################
# Mappings
###############################################################################
 
Mappings: 
  DBFamilyMap: 
    "9.6.8": 
      "family": "aurora-postgresql9.6"
    "9.6.9": 
      "family": "aurora-postgresql9.6"
    "10.4":
      "family": "aurora-postgresql10"
    "10.5":
      "family": "aurora-postgresql10"    
    "10.6":
      "family": "aurora-postgresql10"    

      
###############################################################################
# Conditions
############################################################################### 
Conditions:  
  EncryptionEnabled:
    !Equals
    - !Ref StorageEncrypted
    - 'true'

  1replica:
    !Or
    - !Equals
      - !Ref NumberofAuroraReplicas
      - '1'
    - !Equals
      - !Ref NumberofAuroraReplicas
      - '2'    

  2replica:
    !Equals
    -  !Ref NumberofAuroraReplicas
    - '2'

  3az:
    !Or
    - !Equals
      - !Ref NumberOfAvailabilityZones
      - '3'
    - !Equals
      - !Ref NumberOfAvailabilityZones
      - '4'
    - !Equals
      - !Ref NumberOfAvailabilityZones
      - '5'
  4az:
    !Or
    - !Equals
      - !Ref NumberOfAvailabilityZones
      - '4'
    - !Equals
      - !Ref NumberOfAvailabilityZones
      - '5'
  5az:
    !Equals
    - !Ref NumberOfAvailabilityZones
    - '5'

  AutoCidrs:
    !Equals
    - !Select
      - 0
      - !Ref CidrBlocks
    - Auto
  AutoAzs:
    !Equals
    - !Select
      - 0
      - !Ref AvailabilityZones
    - Auto
  AutoPassword:
    !Equals
    - !Ref DBPassword
    - Auto
  AutoDBName:
    !Equals
    - !Ref DBName
    - Auto

###############################################################################
# Resources 
###############################################################################   
    
Resources:     

  MonitoringIAMRole: 
    Type: AWS::IAM::Role    
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "monitoring.rds.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole

  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        !Select
        - 0
        - !If
          - AutoAzs
          - !GetAtt AWSSBInjectedGetAzs.AvailabilityZones
          - !Ref AvailabilityZones
      VpcId: !Ref VpcId
      CidrBlock:
        !Select
        - 0
        - !If
          - AutoCidrs
          - !GetAtt AWSSBInjectedGetCidrs.CidrBlocks
          - !Ref CidrBlocks
          
  DBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        !Select
        - 1
        - !If
          - AutoAzs
          - !GetAtt AWSSBInjectedGetAzs.AvailabilityZones
          - !Ref AvailabilityZones
      VpcId: !Ref VpcId
      CidrBlock:
        !Select
        - 1
        - !If
          - AutoCidrs
          - !GetAtt AWSSBInjectedGetCidrs.CidrBlocks
          - !Ref CidrBlocks

  DBSubnet3:
    Condition: 3az
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        !Select
        - 2
        - !If
          - AutoAzs
          - !GetAtt AWSSBInjectedGetAzs.AvailabilityZones
          - !Ref AvailabilityZones
      VpcId: !Ref VpcId
      CidrBlock:
        !Select
        - 2
        - !If
          - AutoCidrs
          - !GetAtt AWSSBInjectedGetCidrs.CidrBlocks
          - !Ref CidrBlocks

  DBSubnet4:
    Condition: 4az
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        !Select
        - 3
        - !If
          - AutoAzs
          - !GetAtt AWSSBInjectedGetAzs.AvailabilityZones
          - !Ref AvailabilityZones
      VpcId: !Ref VpcId
      CidrBlock:
        !Select
        - 3
        - !If
          - AutoCidrs
          - !GetAtt AWSSBInjectedGetCidrs.CidrBlocks
          - !Ref CidrBlocks

  DBSubnet5:
    Condition: 5az
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        !Select
        - 4
        - !If
          - AutoAzs
          - !GetAtt AWSSBInjectedGetAzs.AvailabilityZones
          - !Ref AvailabilityZones
      VpcId: !Ref VpcId
      CidrBlock:
        !Select
        - 4
        - !If
          - AutoCidrs
          - !GetAtt AWSSBInjectedGetCidrs.CidrBlocks
          - !Ref CidrBlocks
                 
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: !Sub Database ${DBName}
      SubnetIds:
      - !Ref DBSubnet1
      - !Ref DBSubnet2
      - !If
        - 3az
        - !Ref DBSubnet3
        - !Ref AWS::NoValue
      - !If
        - 4az
        - !Ref DBSubnet4
        - !Ref AWS::NoValue
      - !If
        - 5az
        - !Ref DBSubnet5
        - !Ref AWS::NoValue
              
  ClusterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub Allow Client connections to Database ${DBName}
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Ref DBPort
        ToPort: !Ref DBPort
        CidrIp: !Ref AccessCidr          
      SecurityGroupEgress:
      - IpProtocol: '-1'
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0       
      VpcId: !Ref VpcId
        
  ClusterSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt 'ClusterSecurityGroup.GroupId'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ClusterSecurityGroup
      Description: 'Self Reference'        
      
  RDSDBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: !Join [ "- ", [ "Aurora PG Cluster Parameter Group for Cloudformation Stack ", !Ref DBName ] ]
      Family: !FindInMap [DBFamilyMap, !Ref DBEngineVersion, "family"] 
      Parameters:
        rds.force_ssl: 1    
        timezone: !Ref RDSTimeZone    

  AuroraKMSCMK:
    Type: 'AWS::KMS::Key'
    DeletionPolicy: Retain
    Properties:
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action: 'kms:*'
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: '*'
          Action:
          - 'kms:Encrypt'
          - 'kms:Decrypt'
          - 'kms:ReEncrypt*'
          - 'kms:GenerateDataKey*'
          - 'kms:CreateGrant'
          - 'kms:ListGrants'
          - 'kms:DescribeKey'
          Resource: '*'
          Condition:
            StringEquals:
              'kms:CallerAccount': !Ref 'AWS::AccountId'
              'kms:ViaService': !Sub 'rds.${AWS::Region}.amazonaws.com'

  AuroraKMSCMKAlias:
    Type: 'AWS::KMS::Alias'
    DeletionPolicy: Retain
    DependsOn: AuroraDBCluster
    Properties:
      AliasName: !Sub 'alias/${AuroraDBCluster}'
      TargetKeyId: !Ref AuroraKMSCMK
        
  AuroraDBCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      Engine: aurora-postgresql
      EngineVersion: !Ref DBEngineVersion
      DatabaseName: 
        !If
        - AutoDBName
        - !GetAtt AWSSBInjectedGenerateDBName.DBName
        - !Ref DBName
      Port: !Ref DBPort
      MasterUsername: !Ref DBUsername        
      MasterUserPassword: 
        !If
        - AutoPassword
        - !GetAtt AWSSBInjectedGeneratePassword.MasterUserPassword
        - !Ref DBPassword  
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
      - !Ref ClusterSecurityGroup  
      BackupRetentionPeriod: !Ref BackupRetentionPeriod
      DBClusterParameterGroupName: !Ref RDSDBClusterParameterGroup      
      StorageEncrypted: !Ref StorageEncrypted      
      KmsKeyId:  !If
        - EncryptionEnabled
        - !GetAtt AuroraKMSCMK.Arn
        - !Ref AWS::NoValue
      DeletionProtection: !Ref DeletionProtection
      PreferredMaintenanceWindow: !Sub ${PreferredMaintenanceWindowDay}:${PreferredMaintenanceWindowStartTime}-${PreferredMaintenanceWindowDay}:${PreferredMaintenanceWindowEndTime}
        
  AuroraDBPrimaryInstance:    
    Type: AWS::RDS::DBInstance
    Properties:      
      DBInstanceClass:
        Ref: DBInstanceClass
      DBClusterIdentifier: !Ref AuroraDBCluster  
      Engine: aurora-postgresql            
      MonitoringInterval: !Ref MonitoringInterval
      MonitoringRoleArn: !GetAtt MonitoringIAMRole.Arn      
      AutoMinorVersionUpgrade: !Ref AutoMinorVersionUpgrade
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: !Ref PubliclyAccessible      
      AvailabilityZone:
        !Select
        - 0
        - !If
          - AutoAzs
          - !GetAtt AWSSBInjectedGetAzs.AvailabilityZones
          - !Ref AvailabilityZones

  AuroraDBReplicaOneInstance:
    Condition: 1replica
    Type: AWS::RDS::DBInstance
    DependsOn: 
      - AuroraDBPrimaryInstance
    Properties:      
      DBInstanceClass:
        Ref: DBInstanceClass
      DBClusterIdentifier: !Ref AuroraDBCluster  
      Engine: aurora-postgresql            
      MonitoringInterval: !Ref MonitoringInterval
      MonitoringRoleArn: !GetAtt MonitoringIAMRole.Arn      
      AutoMinorVersionUpgrade: !Ref AutoMinorVersionUpgrade
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: !Ref PubliclyAccessible      
      AvailabilityZone:
        !Select
        - 1
        - !If
          - AutoAzs
          - !GetAtt AWSSBInjectedGetAzs.AvailabilityZones
          - !Ref AvailabilityZones                

  AuroraDBReplicaTwoInstance:
    Condition: 2replica
    Type: AWS::RDS::DBInstance
    DependsOn: 
      - AuroraDBPrimaryInstance
    Properties:      
      DBInstanceClass:
        Ref: DBInstanceClass
      DBClusterIdentifier: !Ref AuroraDBCluster  
      Engine: aurora-postgresql            
      MonitoringInterval: !Ref MonitoringInterval
      MonitoringRoleArn: !GetAtt MonitoringIAMRole.Arn      
      AutoMinorVersionUpgrade: !Ref AutoMinorVersionUpgrade
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: !Ref PubliclyAccessible      
      AvailabilityZone:
        !Select
        - 2
        - !If
          - AutoAzs
          - !GetAtt AWSSBInjectedGetAzs.AvailabilityZones
          - !Ref AvailabilityZones

###############################################################################
# Injected Lambdas
############################################################################### 

  AWSSBInjectedLambdaZipsBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags: []
  AWSSBInjectedCopyZips:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedCopyZipsLambda.Arn
      DestBucket: !Ref AWSSBInjectedLambdaZipsBucket
      SourceBucket: awsservicebrokeralpha
      Prefix: functions/
      Objects:
      - get_cidrs/lambda_function.zip
      - get_azs/lambda_function.zip
      - generate_password/lambda_function.zip
      - generate_dbname/lambda_function.zip
  AWSSBInjectedCopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
      - PolicyName: lambda-copier
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource:
            - arn:aws:s3:::awsservicebrokeralpha/*
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:DeleteObject
            Resource:
            - !Sub arn:aws:s3:::${AWSSBInjectedLambdaZipsBucket}/*
  AWSSBInjectedCopyZipsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt AWSSBInjectedCopyZipsRole.Arn
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse


          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s' % dest_bucket)
                  print('key = %s' % key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)


          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)


          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)


          def handler(event, context):
              timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
  AWSSBInjectedGetCidrsRole:
    Condition: AutoCidrs
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_cidrs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeVpcs
            - ec2:DescribeSubnets
            - ec2:DescribeAvailabilityZones
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGetCidrsLambda:
    DependsOn: AWSSBInjectedCopyZips
    Condition: AutoCidrs
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGetCidrsRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/get_cidrs/lambda_function.zip
      Runtime: python2.7
      Timeout: '60'
  AWSSBInjectedGetCidrs:
    Condition: AutoCidrs
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGetCidrsLambda.Arn
      Qty: !Ref NumberOfAvailabilityZones
      VpcId: !Ref VpcId
      CidrSize: !Ref CidrSize
  AWSSBInjectedGetAzsRole:
    Condition: AutoAzs
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_cidrs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeAvailabilityZones
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGetAzsLambda:
    DependsOn: AWSSBInjectedCopyZips
    Condition: AutoAzs
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGetAzsRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/get_azs/lambda_function.zip
      Runtime: python2.7
      Timeout: '60'
  AWSSBInjectedGetAzs:
    Condition: AutoAzs
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGetAzsLambda.Arn
      Qty: !Ref NumberOfAvailabilityZones
  AWSSBInjectedGeneratePasswordRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_cidrs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGeneratePasswordLambda:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGeneratePasswordRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/generate_password/lambda_function.zip
      Runtime: python3.6
      Timeout: '60'
  AWSSBInjectedGeneratePassword:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGeneratePasswordLambda.Arn
      Length: 32
  AWSSBInjectedGenerateDBNameRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_cidrs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGenerateDBNameLambda:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGenerateDBNameRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/generate_dbname/lambda_function.zip
      Runtime: python3.6
      Timeout: '60'
  AWSSBInjectedGenerateDBName:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGenerateDBNameLambda.Arn
      Length: 32

###############################################################################
# Outputs 
###############################################################################   
Outputs:
  ClusterEndpoint:
    Description: 'Aurora Cluster/Writer Endpoint'
    Value: !GetAtt 'AuroraDBCluster.Endpoint.Address'
  ReaderEndpoint:
    Description: 'Aurora Reader Endpoint'
    Value: !GetAtt 'AuroraDBCluster.ReadEndpoint.Address'
  Port:
    Description: 'Aurora Endpoint Port'
    Value: !GetAtt 'AuroraDBCluster.Endpoint.Port'
  DBUsername:
    Description: 'Database master username'
    Value: !Ref DBUsername
  DBPassword:
   Value:
      !If
      - AutoPassword
      - !GetAtt AWSSBInjectedGeneratePassword.MasterUserPassword
      - !Ref DBPassword
  DBName:
    Value:
      !If
      - AutoDBName
      - !GetAtt AWSSBInjectedGenerateDBName.DBName
      - !Ref DBName

